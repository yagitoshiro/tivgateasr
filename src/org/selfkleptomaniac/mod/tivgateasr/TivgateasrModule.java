/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package org.selfkleptomaniac.mod.tivgateasr;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.kroll.common.Log;

import com.fuetrek.fsr.FSRServiceEventListener;
import com.fuetrek.fsr.FSRServiceOpen;
import com.fuetrek.fsr.FSRServiceEnum.BackendType;
import com.fuetrek.fsr.FSRServiceEnum.EventType;
import com.fuetrek.fsr.entity.AbortInfoEntity;
import com.fuetrek.fsr.entity.ConstructorEntity;
import com.fuetrek.fsr.entity.RecognizeEntity;
import com.fuetrek.fsr.entity.ResultInfoEntity;
import com.fuetrek.fsr.entity.StartRecognitionEntity;
import com.fuetrek.fsr.exception.AbortException;
import com.fuetrek.fsr.exception.NoDataException;
import com.fuetrek.fsr.exception.NoResourceException;
import com.fuetrek.fsr.exception.OperationException;
import com.fuetrek.fsr.exception.ParameterException;

@Kroll.module(name="Tivgateasr", id="org.selfkleptomaniac.mod.tivgateasr")
public class TivgateasrModule extends KrollModule implements FSRServiceEventListener
{
	// Standard Debugging variables
	private static final String TAG = "TivgateasrModule";
	private static FSRServiceOpen fsr;
	private final BackendType backendType = BackendType.D;

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;
	
	public TivgateasrModule()
	{
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.d(TAG, "inside onAppCreate");
		// put module init code that needs to run when the application is created
	}

	// Methods
	@Kroll.method
	public void init(KrollDict options){
		String APIKey = TiConvert.toString(options.get("APIKey"));
		int speechTime = 1000;
		int recordSize = 240;
		int recognizeTime = 1000;
		if(options.containsKey("speechTime")){
			speechTime = TiConvert.toInt(options.get("speechTime").toString());
		}
		if(options.containsKey("recordSize")){
			recordSize = TiConvert.toInt(options.get("recordSize").toString());
		}
		if(options.containsKey("recognizeTime")){
			recognizeTime = TiConvert.toInt(options.get("recognizeTime").toString());
		}
		final ConstructorEntity construct = new ConstructorEntity();
		construct.setApiKey(APIKey);
		construct.setSpeechTime(speechTime);
		construct.setRecordSize(recordSize);
		construct.setRecognizeTime(recognizeTime);
		TiApplication appContext = TiApplication.getInstance();
		construct.setContext(appContext);
		try{
			fsr = new FSRServiceOpen(this, this, construct);
			if(null == fsr){
				Log.d(TAG, "fsr IS NULL");
			}
		}catch(Exception e){
			Log.d(TAG, e.getMessage());
		}	
	}
	
	@Kroll.method
	public void connect(){
		try {
			fsr.connectSession(backendType);
		} catch (AbortException e) {
			Log.d(TAG, e.getMessage());
		} catch (ParameterException e) {
			Log.d(TAG, e.getMessage());
		} catch (OperationException e) {
			Log.d(TAG, e.getMessage());
		}
	}
	
	@Kroll.method
	public void start(KrollDict options){
		final StartRecognitionEntity startRecognitionEntity = new StartRecognitionEntity();
		if(options.containsKey("vadOffTime")){
			startRecognitionEntity.setVadOffTime((short) TiConvert.toInt(options.get("vadOffTime").toString()));
		}else{
			startRecognitionEntity.setVadOffTime((short) 500);
		}
		if(options.containsKey("listenTime")){
			startRecognitionEntity.setListenTime(TiConvert.toInt(options.get("listenTime").toString()));
		}else{
			startRecognitionEntity.setListenTime(0);
		}
		if(options.containsKey("levelSensibility")){
			startRecognitionEntity.setLevelSensibility(TiConvert.toInt(options.get("levelSensibility").toString()));
		}else{
			startRecognitionEntity.setLevelSensibility(10);
		}
		if(options.containsKey("autoStart")){
			startRecognitionEntity.setAutoStart(TiConvert.toBoolean(options.get("autoStart").toString()));
		}else{
			startRecognitionEntity.setAutoStart(false);
		}
		try {
			fsr.startRecognition(backendType, startRecognitionEntity);
		} catch (AbortException e) {
			Log.d(TAG, e.getMessage());
		} catch (ParameterException e) {
			Log.d(TAG, e.getMessage());
		} catch (OperationException e) {
			Log.d(TAG, e.getMessage());
		} catch (NoResourceException e) {
			Log.d(TAG, e.getMessage());
		}
	}
	
	@Kroll.method
	public void stop(){
		try {
			fsr.stopRecognition();
		} catch (AbortException e) {
			Log.d(TAG, e.getMessage());
		} catch (OperationException e) {
			Log.d(TAG, e.getMessage());
		}
	}
	
	@Kroll.method
	public String getResult(){
		String result = "";
		try {
			RecognizeEntity recognizer = fsr.getSessionResultStatus(backendType);
			if(recognizer.getCount() > 0){
				try {
					ResultInfoEntity info = fsr.getSessionResult(backendType, 1);
					result = info.getText();
					return result;
				} catch (NoDataException e) {
					Log.d(TAG, e.getMessage());
					return result;
				}
			}else{
				return result;
			}
		} catch (AbortException e) {
			Log.d(TAG, e.getMessage());
			return result;
		} catch (ParameterException e) {
			Log.d(TAG, e.getMessage());
			return result;
		} catch (OperationException e) {
			Log.d(TAG, e.getMessage());
			return result;
		}
	}
	
	@Kroll.method
	public void disconnect(){
		try {
			fsr.stopRecognition();
		} catch (AbortException e) {
			Log.d(TAG, e.getMessage());
		} catch (OperationException e) {
			Log.d(TAG, e.getMessage());
		}
	}

	@Override
	public void notifyAbort(Object arg0, AbortInfoEntity arg1) {
		// TODO Auto-generated method stub
		Log.d(TAG, arg1.toString());
		KrollDict dict = new KrollDict();
		dict.put("message", arg1.toString());
		fireEvent("notifyAbort", dict);
	}

	@Override
	public void notifyEvent(Object arg0, EventType arg1, BackendType arg2,
			Object arg3) {
		// TODO Auto-generated method stub
		Log.d(TAG, arg1.toString());
		KrollDict dict = new KrollDict();
		dict.put("message", arg1.toString());
		fireEvent("notifyEvent", dict);
		
	}
}

